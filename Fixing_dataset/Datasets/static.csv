0,1
"Can you help me create a 3D scene using Manim that includes a set of axes and a sphere? I want the sphere to have a checkerboard texture in shades of red, and I’d like to position the light source to come from behind the scene. Also, please set the camera orientation to give a nice perspective of the sphere.","from manim import *

class ThreeDLightSourcePosition(ThreeDScene):
    def construct(self):
        axes = ThreeDAxes()
        sphere = Surface(
            lambda u, v: np.array([
                1.5 * np.cos(u) * np.cos(v),
                1.5 * np.cos(u) * np.sin(v),
                1.5 * np.sin(u)
            ]), v_range=[0, TAU], u_range=[-PI / 2, PI / 2],
            checkerboard_colors=[RED_D, RED_E], resolution=(15, 32)
        )
        self.renderer.camera.light_source.move_to(3*IN) # changes the source of the light
        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)
        self.add(axes, sphere)
"
"Can you help me create a simple 3D scene using Manim? I want to include a 3D text that says 'This is a 3D text' and have it fixed in the frame while also displaying some 3D axes. I’d like the camera to be oriented at a specific angle, with the text positioned in the upper left corner of the screen. Could you provide the code for that?","from manim import *

class FixedInFrameMObjectTest(ThreeDScene):
    def construct(self):
        axes = ThreeDAxes()
        self.set_camera_orientation(phi=75 * DEGREES, theta=-45 * DEGREES)
        text3d = Text(""This is a 3D text"")
        self.add_fixed_in_frame_mobjects(text3d)
        text3d.to_corner(UL)
        self.add(axes)
        self.wait()
"
"Can you help me create a simple heat diagram plot using Manim? I want to include axes labeled with ΔQ and temperature in degrees Celsius. The x-axis should range from 0 to 40, and the y-axis should range from -8 to 32. I also need to plot a line graph with specific points: (0, 20), (8, 0), (38, 0), and (39, -5). Please make sure the graph looks clear and professional!","from manim import *

class HeatDiagramPlot(Scene):
    def construct(self):
        ax = Axes(
            x_range=[0, 40, 5],
            y_range=[-8, 32, 5],
            x_length=9,
            y_length=6,
            x_axis_config={""numbers_to_include"": np.arange(0, 40, 5)},
            y_axis_config={""numbers_to_include"": np.arange(-5, 34, 5)},
            tips=False,
        )
        labels = ax.get_axis_labels(
            x_label=Tex(r""$\Delta Q$""), y_label=Tex(r""T[$^\circ C$]"")
        )

        x_vals = [0, 8, 38, 39]
        y_vals = [20, 0, 0, -5]
        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)

        self.add(ax, labels, graph)
"
"Can you help me create a 3D surface plot using Manim? I want to visualize a Gaussian function over a range of values. The surface should be colorful, with a checkerboard pattern, and I’d like to set the camera orientation to get a good view of the plot. Also, please include 3D axes for reference.","from manim import *

class ThreeDSurfacePlot(ThreeDScene):
    def construct(self):
        resolution_fa = 24
        self.set_camera_orientation(phi=75 * DEGREES, theta=-30 * DEGREES)

        def param_gauss(u, v):
            x = u
            y = v
            sigma, mu = 0.4, [0.0, 0.0]
            d = np.linalg.norm(np.array([x - mu[0], y - mu[1]]))
            z = np.exp(-(d ** 2 / (2.0 * sigma ** 2)))
            return np.array([x, y, z])

        gauss_plane = Surface(
            param_gauss,
            resolution=(resolution_fa, resolution_fa),
            v_range=[-2, +2],
            u_range=[-2, +2]
        )

        gauss_plane.scale(2, about_point=ORIGIN)
        gauss_plane.set_style(fill_opacity=1,stroke_color=GREEN)
        gauss_plane.set_fill_by_checkerboard(ORANGE, BLUE, opacity=0.5)
        axes = ThreeDAxes()
        self.add(axes,gauss_plane)
"
"Can you help me create a Manim scene that illustrates the concept of horizontal distance between two points? I want to include two dots at specific coordinates, connect them with a line, and add braces with annotations. The first brace should label the line as 'Horizontal distance', and the second brace should represent the difference in the x-coordinates with the label 'x - x₁'. Please make sure the line is colored orange and the braces are positioned correctly.","from manim import *

class BraceAnnotation(Scene):
    def construct(self):
        dot = Dot([-2, -1, 0])
        dot2 = Dot([2, 1, 0])
        line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)
        b1 = Brace(line)
        b1text = b1.get_text(""Horizontal distance"")
        b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())
        b2text = b2.get_tex(""x-x_1"")
        self.add(line, dot, dot2, b1, b2, b1text, b2text)
"
"Can you help me create a Manim scene that includes a graph with two curves? I want the first curve to be a downward-opening parabola defined by the equation \(y = 4x - x^2\) and the second curve to be an upward-opening parabola defined by \(y = 0.8x^2 - 3x + 4\). I would like to include vertical lines at \(x = 2\) and \(x = 3\) on the first curve, and I want to visualize the area between the two curves from \(x = 2\) to \(x = 3\). Additionally, please include Riemann rectangles under the first curve between \(x = 0.3\) and \(x = 0.6\). The axes should range from 0 to 5 on the x-axis and 0 to 6 on the y-axis, with specific labels on the axes. Make sure to use different colors for the curves and areas for better visualization.","from manim import *

class GraphAreaPlot(Scene):
    def construct(self):
        ax = Axes(
            x_range=[0, 5],
            y_range=[0, 6],
            x_axis_config={""numbers_to_include"": [2, 3]},
            tips=False,
        )

        labels = ax.get_axis_labels()

        curve_1 = ax.plot(lambda x: 4 * x - x ** 2, x_range=[0, 4], color=BLUE_C)
        curve_2 = ax.plot(
            lambda x: 0.8 * x ** 2 - 3 * x + 4,
            x_range=[0, 4],
            color=GREEN_B,
        )

        line_1 = ax.get_vertical_line(ax.input_to_graph_point(2, curve_1), color=YELLOW)
        line_2 = ax.get_vertical_line(ax.i2gp(3, curve_1), color=YELLOW)

        riemann_area = ax.get_riemann_rectangles(curve_1, x_range=[0.3, 0.6], dx=0.03, color=BLUE, fill_opacity=0.5)
        area = ax.get_area(curve_2, [2, 3], bounded_graph=curve_1, color=GREY, opacity=0.5)

        self.add(ax, labels, curve_1, curve_2, line_1, line_2, riemann_area, area)
"
"Can you help me create a simple animation using Manim? I want to show a vector arrow starting from the origin (0, 0) and pointing to the coordinates (2, 2). Please include a dot at the origin, the arrow itself, and a number plane for context. Additionally, I'd like to have labels for both the origin and the tip of the arrow, showing their respective coordinates.","from manim import *

class VectorArrow(Scene):
    def construct(self):
        dot = Dot(ORIGIN)
        arrow = Arrow(ORIGIN, [2, 2, 0], buff=0)
        numberplane = NumberPlane()
        origin_text = Text('(0, 0)').next_to(dot, DOWN)
        tip_text = Text('(2, 2)').next_to(arrow.get_end(), RIGHT)
        self.add(numberplane, dot, arrow, origin_text, tip_text)
"
"Can you help me create a simple animation using Manim that features a logo? I want the logo to consist of a large letter 'M' in black, surrounded by a green circle, a blue square, and a red triangle. The background should be a light beige color. The letter 'M' should be positioned slightly to the left and above the center of the screen, while the shapes should be arranged around it. Please make sure the shapes are filled with their respective colors and that the overall composition looks balanced.","from manim import *

class ManimCELogo(Scene):
    def construct(self):
        self.camera.background_color = ""#ece6e2""
        logo_green = ""#87c2a5""
        logo_blue = ""#525893""
        logo_red = ""#e07a5f""
        logo_black = ""#343434""
        ds_m = MathTex(r""\mathbb{M}"", fill_color=logo_black).scale(7)
        ds_m.shift(2.25 * LEFT + 1.5 * UP)
        circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)
        square = Square(color=logo_blue, fill_opacity=1).shift(UP)
        triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)
        logo = VGroup(triangle, square, circle, ds_m)  # order matters
        logo.move_to(ORIGIN)
        self.add(logo)
"
"Can you help me create a Manim scene that plots the sine and cosine functions on a set of axes? I want the x-axis to range from -10 to 10, and the y-axis to range from -1.5 to 1.5. Please include labels for the axes, and also label the sine and cosine curves. Additionally, I would like to have a vertical line at x = 2π with a label indicating that position. Make sure the sine curve is in blue and the cosine curve is in red, and the vertical line is in yellow. The axes should be green, and the labels should be clear and easy to read.","from manim import *

class SinAndCosFunctionPlot(Scene):
    def construct(self):
        axes = Axes(
            x_range=[-10, 10.3, 1],
            y_range=[-1.5, 1.5, 1],
            x_length=10,
            axis_config={""color"": GREEN},
            x_axis_config={
                ""numbers_to_include"": np.arange(-10, 10.01, 2),
                ""numbers_with_elongated_ticks"": np.arange(-10, 10.01, 2),
            },
            tips=False,
        )
        axes_labels = axes.get_axis_labels()
        sin_graph = axes.plot(lambda x: np.sin(x), color=BLUE)
        cos_graph = axes.plot(lambda x: np.cos(x), color=RED)

        sin_label = axes.get_graph_label(
            sin_graph, ""\\sin(x)"", x_val=-10, direction=UP / 2
        )
        cos_label = axes.get_graph_label(cos_graph, label=""\\cos(x)"")

        vert_line = axes.get_vertical_line(
            axes.i2gp(TAU, cos_graph), color=YELLOW, line_func=Line
        )
        line_label = axes.get_graph_label(
            cos_graph, r""x=2\pi"", x_val=TAU, direction=UR, color=WHITE
        )

        plot = VGroup(axes, sin_graph, cos_graph, vert_line)
        labels = VGroup(axes_labels, sin_label, cos_label, line_label)
        self.add(plot, labels)
"
"Can you help me create a Manim scene that displays a gradient image? I want the image to be generated from an array where the colors transition smoothly from black to white. The image should be scaled up a bit, and I’d like to add a green rectangle around it for emphasis. Could you provide the code for that?","from manim import *

class GradientImageFromArray(Scene):
    def construct(self):
        n = 256
        imageArray = np.uint8(
            [[i * 256 / n for i in range(0, n)] for _ in range(0, n)]
        )
        image = ImageMobject(imageArray).scale(2)
        image.background_rectangle = SurroundingRectangle(image, color=GREEN)
        self.add(image, image.background_rectangle)
"
